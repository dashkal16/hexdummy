plugins {
    id "platform-conventions"
}

platformConventions {
    platform = "forge"
}

architectury {
    forge()
}

loom {
    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "{{ modid }}-common.mixins.json"
        mixinConfig "{{ modid }}.mixins.json"
    }
}

configurations {
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${project.forgeVersion}"
    modApi "dev.architectury:architectury-forge:${project.architecturyVersion}"

    modImplementation("at.petra-k.hexcasting:hexcasting-forge-${project.minecraftVersion}:${project.hexcastingVersion}") {
        transitive = false
    }

    // // Hex Casting Dependencies
    modCompileOnly "at.petra-k.paucal:paucal-forge-${minecraftVersion}:${paucalVersion}"
    modCompileOnly "vazkii.patchouli:Patchouli:${minecraftVersion}-${patchouliVersion}"

    modRuntimeOnly "at.petra-k.paucal:paucal-forge-${minecraftVersion}:${paucalVersion}"
    modRuntimeOnly "vazkii.patchouli:Patchouli:${minecraftVersion}-${patchouliVersion}"

    runtimeOnly "thedarkcolour:kotlinforforge:$project.forgeKotlinVersion"

    common(project(path: ":{{ common_path }}", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":{{ common_path }}", configuration: "transformProductionForge")) { transitive false }
}

shadowJar {
    exclude "fabric.mod.json"
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${project.archivesBaseName}-${project.name}-forge"
            from components.java
        }
    }
}

publishMods {
    modLoaders.add("forge")

    // Uncomment your desired platform(s)
//    curseforge {
//        requires { slug = "kotlin-for-forge" }
//    }
//
//    modrinth {
//        requires { slug = "kotlin-for-forge" }
//    }
}
